{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Parameters" : {
    "AppName": {
      "Description": "The name of this app",
      "Type": "String",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "App names contain letters and numbers; must start with a letter"
    },
    "AppsDomain": {
      "Description": "Base domain shared between all apps",
      "Type": "String"
    },
    "KeyName" : {
      "Description" : "The EC2 Key Pair to allow SSH access to the instances",
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },
    "Scale": {
      "Type": "Number",
      "MinValue": "0",
      "MaxValue": "3",
      "Description": "Number of instances in the autoscale group"
    },
    "Version": {
      "Description": "Version of the app to deploy",
      "Type": "String",
      "Default": "master"
    },
    "CertificateBucket": {
      "Description": "Bucket used to store app certificates",
      "Type": "String"
    },
    "CreateElbBackendCertificatesArn": {
      "Description": "ARN for the Lambda used to create backend certificates",
      "Type": "String"
    },
    "Route53HostedZoneId": {
      "Description": "ID for the Route53 Hosted Zone which will hold the CNAME for this app",
      "Type": "String"
    }
  },

  "Resources" : {

    "AppSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription": "Limit access to the app instances",
        "SecurityGroupIngress": [
            {
              "IpProtocol": "tcp",
              "FromPort": "8443",
              "ToPort": "8443",
              "SourceSecurityGroupId" : { "Ref" : "ElbSecurityGroup" }
            },
            {
              "IpProtocol": "tcp",
              "FromPort": "8080",
              "ToPort": "8080",
              "SourceSecurityGroupId" : { "Ref" : "ElbSecurityGroup" }
            },
            {
              "IpProtocol": "tcp",
              "FromPort": "22",
              "ToPort": "22",
              "CidrIp" : "0.0.0.0/0"
            }
        ],
        "VpcId": { "Ref": "AppVpc" }
      },
      "DependsOn": "AttachVpcInternetGateway"
    },

    "ElbSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription": "Limit access to the ELB",
        "SecurityGroupIngress": [
            {
              "IpProtocol": "tcp",
              "FromPort": "80",
              "ToPort": "80",
              "CidrIp" : "0.0.0.0/0"
            }
        ],
        "VpcId": { "Ref": "AppVpc" }
      },
      "DependsOn": "AttachVpcInternetGateway"
    },

    "ElbBackendCertificate": {
      "Type": "Custom::ElbBackendCertificate",
      "Properties": {
        "ServiceToken": { "Ref": "CreateElbBackendCertificatesArn" },
        "AppDomain": {"Fn::Join" : [".", [ {"Ref": "AppName"}, {"Ref": "AppsDomain"}]]},
        "AppName": { "Ref": "AppName" },
        "AppS3Bucket": { "Ref": "CertificateBucket"}
      }
    },

    "AppScalingGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : { "Fn::GetAZs" : ""},
        "VPCZoneIdentifier" : [ {"Ref": "Subnet1"}, {"Ref": "Subnet2"}, {"Ref": "Subnet3"}],
        "LaunchConfigurationName" : { "Ref" : "AppLaunchConfig" },
        "DesiredCapacity" : { "Ref": "Scale" },
        "MinSize" : "0",
        "MaxSize" : "4",
        "LoadBalancerNames" : [ { "Ref" : "ElasticLoadBalancer" } ]
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": { "Ref": "Scale" },
          "MaxBatchSize": "1"
        }
      },
      "DependsOn": "AttachVpcInternetGateway"
    },

    "AppRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },

    "AppPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "AppRole",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:Get*",
                "s3:Head*"
              ],
              "Resource": [
                { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "CertificateBucket" }, "/backend-certificate-", {"Ref": "AppName" }, ".json" ] ] }
              ]
            }
        ]
        },
        "Roles": [
          {
            "Ref": "AppRole"
          }
        ]
      }
    },

    "AppProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "AppRole"
          }
        ]
      }
    },

    "AppLaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "IamInstanceProfile": {
          "Ref": "AppProfile"
        },
        "KeyName" : { "Ref" : "KeyName" },
        "AssociatePublicIpAddress": "true",
        "ImageId" : "ami-a4d44ed7",
        "SecurityGroups" : [ { "Fn::GetAtt": ["AppSecurityGroup", "GroupId"] } ],
        "InstanceType" : "t2.nano",
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["\n", [
            "#cloud-config",
            "---",
            "packages:",
            " - git",
            "write_files:",
            " -   content: |",
            { "Fn::Join" : ["", [
            "         APP_NAME=\"", { "Ref" : "AppName" }, "\"\n",
            "         APP_SCALE=\"", { "Ref" : "Scale" }, "\"\n",
            "         APP_VERSION=\"", { "Ref" : "Version" }, "\"\n"
            ]]},
            "     path: /etc/app.conf",
            "     permissions: '0644'",
            "runcmd:",
            " - /usr/bin/git clone https://github.com/bewt85/CfTemplateLambdaDemo.git /home/ubuntu/demo_folder",
            { "Fn::Join" : ["", [
            " - /usr/bin/git -C /home/ubuntu/demo_folder checkout ", { "Ref" : "Version" }, "\n"
            ]]},
            " - /bin/chown -R ubuntu:ubuntu /home/ubuntu/demo_folder",
            " - /bin/chmod 0744 /home/ubuntu/demo_folder/server_setup/setup.sh",
            " - /home/ubuntu/demo_folder/server_setup/setup.sh",
            " - /bin/systemctl start app",
            " - /bin/chmod 0744 /home/ubuntu/demo_folder/server_setup/setup.sh",
            { "Fn::Join" : ["", [
            " - /home/ubuntu/demo_folder/server_setup/venv/bin/python /home/ubuntu/demo_folder/server_setup/setup_backend_SSL.py ",  { "Ref": "CertificateBucket" }, " backend-certificate-", {"Ref": "AppName" }, ".json"
            ]]}
        ]]}}
      }
    },

    "ElasticLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "Subnets": [ {"Ref": "Subnet1"}, {"Ref": "Subnet2"}, {"Ref": "Subnet3"}],
        "CrossZone" : "true",
        "Listeners" : [ {
          "LoadBalancerPort" : "80",
          "InstancePort" : "8080",
          "Protocol" : "HTTP"
        } ],
        "HealthCheck" : {
          "Target" : "TCP:8080",
          "HealthyThreshold" : "3",
          "UnhealthyThreshold" : "5",
          "Interval" : "30",
          "Timeout" : "5"
        },
        "SecurityGroups": [ {"Ref": "ElbSecurityGroup"} ]
      },
      "DependsOn": "AttachVpcInternetGateway"
    },

    "Route53RecordSet" : {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
        "HostedZoneId" : {"Ref" : "Route53HostedZoneId"},
        "Comment" : { "Ref" : "AppName" },
        "Name" : { "Fn::Join" : [ ".", [ { "Ref" : "AppName" }, { "Ref": "AppsDomain" }, ""]]},
        "Type" : "CNAME",
        "TTL" : "500",
        "ResourceRecords" : [ { "Fn::GetAtt" : [ "ElasticLoadBalancer", "DNSName" ]} ]
      }
    },

    "AppVpc": {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : "10.0.0.0/16"
      }
    },

    "AttachVpcInternetGateway" : {
      "Type" : "AWS::EC2::VPCGatewayAttachment",
      "Properties" : {
        "VpcId" : { "Ref" : "AppVpc" },
        "InternetGatewayId" : { "Ref" : "VpcInternetGateway" }
      }
    },

    "VpcInternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {}
    },

    "Subnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": { "Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ] },
        "CidrBlock" : "10.0.1.0/24",
        "VpcId": { "Ref": "AppVpc" }
      }
    },

    "Subnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": { "Fn::Select" : [ "1", { "Fn::GetAZs" : "" } ] },
        "CidrBlock" : "10.0.2.0/24",
        "VpcId": { "Ref": "AppVpc" }
      }
    },

    "Subnet3": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": { "Fn::Select" : [ "2", { "Fn::GetAZs" : "" } ] },
        "CidrBlock" : "10.0.3.0/24",
        "VpcId": { "Ref": "AppVpc" }
      }
    },

    "RouteTable": {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref": "AppVpc" }
      }
    },

    "AppInternetRoute" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "VpcInternetGateway" }
      },
      "DependsOn": "AttachVpcInternetGateway"
    },

    "Subnet1Routing": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTable"
        },
        "SubnetId": {
          "Ref": "Subnet1"
        }
      }
    },

    "Subnet2Routing": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTable"
        },
        "SubnetId": {
          "Ref": "Subnet2"
        }
      }
    },

    "Subnet3Routing": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTable"
        },
        "SubnetId": {
          "Ref": "Subnet3"
        }
      }
    }

  },

  "Outputs" : {
    "LoadBalancer": {
      "Value": { "Fn::GetAtt": ["ElasticLoadBalancer", "DNSName"]}
    }
  }
}

